{"version":3,"sources":["components/AddCategory.tsx","helpers/getGifs.tsx","hooks/useFetchGifs.tsx","components/GifGridItem.tsx","components/GifGrid.tsx","components/GifExpertApp.tsx","index.tsx"],"names":["AddCategory","_ref","categories","setcategories","_useState","useState","_useState2","Object","slicedToArray","inputValue","setInputValue","react_default","a","createElement","Fragment","onSubmit","e","preventDefault","trim","length","concat","toConsumableArray","type","value","onChange","target","getGifs","asyncToGenerator","regenerator_default","mark","_callee","category","resp","_yield$resp$json","data","wrap","_context","prev","next","fetch","sent","json","abrupt","stop","_x","apply","this","arguments","useFetchGifs","loading","state","setstate","useEffect","then","result","GifGridItem","id","title","username","images","className","src","downsized_medium","url","alt","GifGrid","_useFetchGifs","map","components_GifGridItem","key","GifExpertApp","components_AddCategory","components_GifGrid","ReactDOM","render","components_GifExpertApp","document","getElementById"],"mappings":"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","file":"static/js/main.2ac488e3.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\ntype Props = {\n    categories: string[];\n    setcategories: (active: string[]) => void;\n }\n\n\n const AddCategory = ({ categories, setcategories} :Props ) => {\n\n    const [inputValue, setInputValue] = useState('');\n    \n    const handleChange=(e:any)=>{\n       setInputValue(e.target.value);\n    };\n\n    const handleSubmit=(e:any)=>{\n\n        e.preventDefault();\n       \n        if (inputValue.trim().length>2) {\n            setcategories([inputValue,...categories]);\n            setInputValue('');\n          }\n     };\n \n\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n            <h2>Categoria</h2>\n            <input type=\"text\" value={inputValue} onChange={handleChange}/>\n            </form>\n        </>\n    );\n}\nexport default AddCategory;","const getGifs:any=async(category:string)=>{\n\n    const url='https://api.giphy.com/v1/gifs/search?api_key=t9uhXRtHevGH3vycboKeFiWULBRuKvKL&q=';\n    \n    const resp=await fetch(`${url}${category}`);\n    \n    const {data}=await resp.json();\n    \nreturn data;\n};\n\nexport default getGifs;","import { useEffect, useState } from \"react\";\nimport getGifs from \"../helpers/getGifs\";\nimport { GifInterface } from \"../interfaces/GifInterfaces\";\n\n const useFetchGifs = (category:string) => {\n     const [state, setstate] = useState({data:[] as GifInterface[],loading:true});\n\n    useEffect(() => {\n            \n    getGifs(category)\n    .then((result:any) => {\n        setstate({\n            data:result,\n            loading:false\n        });\n    });\n        setstate\n    }, [])\n    \n     return state;\n}\nexport default useFetchGifs;","import React from 'react'\nimport { GifInterface } from '../interfaces/GifInterfaces';\n\n const GifGridItem = ({id,title,username,images}:GifInterface) => {\n    return (\n\n        <div className=\"card-row\">\n          <div className=\"card  animate__animated animate__fadeIn\" >\n           <div className=\"container \">\n           <img src={images.downsized_medium.url} alt={title} />\n            <p>{title!=''?title:'No tiene titulo'}</p>\n            <p id='p-username' >{username!=''?username:'No tiene username'}</p>\n           </div>\n        </div>\n        </div>\n      \n    )\n}\nexport default GifGridItem;","import React from 'react'\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\n\ntype Props = {\n    category: string;\n }\n\n\nconst GifGrid = ({category}:Props) => {\n\n const {data,loading}= useFetchGifs(category);\n   \n   return (\n     <>\n     <div className=\"row \">\n        {loading?<h2>Cargando...</h2>:\n        \n        <div>\n        <h2>{category}</h2>\n        {data.map((e)=><GifGridItem key={e.id} id={e.id} username={e.username} title={e.title} images={e.images}/>)}            \n        </div>\n        \n        }\n     </div>\n     </>\n    )\n}\nexport default GifGrid;","import React , { useState } from 'react';\nimport AddCategory from './AddCategory';\nimport GifGrid from './GifGrid';\n\n\nconst GifExpertApp=()=> {\n const [categories, setcategories] = useState<string[]>(['One Punch Man']);\n\n    return (\n        <>\n        <AddCategory setcategories={setcategories} categories={categories}/>  \n        <hr />\n            \n        <ol>\n        {\n        categories.map((category:string)=><GifGrid key={category}  category={category} />)\n        }\n        \n        </ol>\n        </>\n    );\n\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\n\nimport './styles/index.css';\n\n\nReactDOM.render(<GifExpertApp/>,document.getElementById('root'));"],"sourceRoot":""}